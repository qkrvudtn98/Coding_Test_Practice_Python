# 문제 : 큰 수의 법칙

# [입력 조건]
# 첫째 줄에 N(2<=N<= 1000), M(1<=M<=10000), K(1<=K<=10000)의 자연수가 주어지며, 각 자연수는 공백으로 구분한다.
# 둘째 줄에 N개의 자연수가 주어진다. 각 자연수는 공백으로 구분한다. 단, 각각의 자연수는 1이상 10000이하의 수로 주어진다.
# 입력으로 주어지는 K는 항상 M보다 작거나 같다.

# [출력 조건]
# 첫째 줄에 동빈이의 큰 수의 법칙에 따라 더해진 답을 출력한다

# 풀이 과정

# 단순하게 문제 해결하는 과정
# N, M, K를 공백으로 구분하여 입력받기
n, m, k = map(int, input().split())

# N개의 수를 공백으로 구분하여 입력받기
data = list(map(int, input().split()))

# 입력받은 데이터 정렬하기 (오름차순으로 정리해서 가장 큰 수와 두번째로 큰 수를 뽑기 위함)
data.sort()
first = data[n-1]
second = data[n-2]

result = 0

while True:
    for i in range(k): # 가장 큰 수를 K번 더하기
        if m == 0: # m이 0이라면 반복문 탈출
            break
        result += first
        m -= 1 # 더할 때마다 1씩 빼기
    if m == 0: # m이 0이라면 반복문 탈출
        break
    result += second # 두 번째로 큰 수를 한 번 더하기
    m -= 1 # 더할 때마다 1씩 빼기

print(result) # 최종 답안 출력
# M이 10000 이하이므로 이러한 방식으로도 문제를 해결할 수 있지만, M의 크기가 100억 이상이 넘어가면 시간 초과 판정을 받을 것이다.

# 따라서 더 효율적인 방법으로 문제를 해결해야 하는데, 큰 수의 법칙은 가장 큰수를 K번 반복하고, 두번째로 큰 수를 한 번 더해준 뒤, 다시 가장 큰 수를 K번 반복해주는 규칙을 갖는다.
# 그래서 N = 5, M = 8, K = 3이고 data = 2 4 5 4 6일 경우에, 가장 큰 수 : 6 / 두 번째 수 : 5가 되어, 6 + 6 + 6 + 5 + 6 + 6 + 6 + 5 = 46의 결과값을 반환한다.
# 그런데 여기에서 한 가지 규칙을 찾을 수 있는데, 6 + 6 + 6 + 5의 수열이 반복된다는 것이다.
# 이 수열의 길이는 K+1이며, 이를 이용하여 가장 큰 수가 나오는 횟수 또한 구해낼 수 있다.
# 가장 큰 수가 나오는 횟수 : (m/(k+1))*k+(m%(k+1))

# 코드 재구성
n, m, k = map(int, input().split())
data = list(map(int, input().split()))

data.sort()
first = data[n-1]
second = data[n-2]

# 가장 큰 수 더해지는 횟수 계산
count = int(m/(k+1))*k
count += m%(k+1)

result = 0
result = first*count # 가장 큰 수 더하기
result += (m-count)*second # 두 번째로 큰 수 더하기

print(result) # 최종 결과 출력 
